services:
  # Nginx Service for routing requests to different websites/applications
  nginx:
    image: nginx:alpine  # Using a lightweight version of Nginx
    container_name: nginx  # Giving the container a static name
    restart: unless-stopped  # Restart policy
    ports:
      - "80:80"   # Exposing HTTP port
      - "443:443" # Exposing HTTPS port
    volumes:
      - /var/www/public:/var/www/public  # Web content
      - /var/www/private/docker/nginx/conf.d:/etc/nginx/conf.d  # Virtual hosts
      - /var/www/private/docker/nginx/ssl:/etc/nginx/ssl  # SSL certificates
      - /var/www/private/docker/nginx/logs:/var/log/nginx  # Nginx logs
      - /var/www/private/docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro  # Mount default nginx.conf (read-only)
      - /var/www/private/docker/nginx/mime.types:/etc/nginx/mime.types:ro  # Optional: Mount mime.types (read-only)
    depends_on:
      - php53  # Ensure the PHP 5.3 container starts before Nginx
      - php73  # Ensure the PHP 7.x container starts before Nginx
      - php81  # Ensure the PHP 8.x container starts before Nginx
    logging:
      driver: journald  # Use systemd's journald for logging
      options:
        tag: "nginx"  # Tag the logs to easily identify them
        mode: non-blocking  # Prevent the container from blocking if logging fails
        max-buffer-size: "4m"  # Set a buffer size limit for log entries
    networks:
      - web  # Public-facing network for handling web traffic
      - backend  # Backend network to connect with PHP services

  # PostgreSQL Database Service
  postgres:
    image: postgres:latest  # Latest version of PostgreSQL
    container_name: postgres  # Static name for the Postgres container
    restart: unless-stopped  # Restart policy
    environment:
      POSTGRES_USER: ${POSTGRES_USER}  # Username stored in .env file
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}  # Password stored in .env file
      POSTGRES_DB: ${POSTGRES_DB}  # Database name stored in .env file
    volumes:
      - /var/www/private/postgre:/var/lib/postgresql/data  # Persistent data storage for the Postgres database
    logging:
      driver: journald
      options:
        tag: "postgres"  # Tag logs for easy identification
        mode: non-blocking
        max-buffer-size: "4m"
    networks:
      - backend  # Database should only be accessible from the backend network

  # MariaDB Database Service (alternative to MySQL)
  mariadb:
    image: mariadb:latest  # Latest version of MariaDB
    container_name: mariadb  # Static name for the MariaDB container
    restart: unless-stopped  # Restart policy
    environment:
      MYSQL_ROOT_PASSWORD: ${MARIADB_ROOT_PASSWORD}  # Root password stored in .env
      MYSQL_DATABASE: ${MARIADB_DATABASE}  # Initial database stored in .env
      MYSQL_USER: ${MARIADB_USER}  # Non-root user stored in .env
      MYSQL_PASSWORD: ${MARIADB_PASSWORD}  # Password for non-root user stored in .env
    volumes:
      - /var/www/private/mariadb:/var/lib/mysql  # Persistent data storage for MariaDB
    logging:
      driver: journald
      options:
        tag: "mariadb"
        mode: non-blocking
        max-buffer-size: "4m"
    networks:
      - backend  # Should only be accessible from backend services


  # PHP 5.3 FPM Service
  php53:
    image: satyadeep/php-53-fpm-alpine-3.4-with-ext  # PHP 5.3 FPM with necessary extensions
    container_name: php53  # Static name for the PHP 5.3 container
    restart: unless-stopped  # Restart policy
    volumes:
      - /var/www/public:/var/www/public  # Mount public directory to serve PHP applications
    logging:
      driver: journald
      options:
        tag: "php53"
        mode: non-blocking
        max-buffer-size: "4m"
    networks:
      - backend  # Only accessible within the backend network (used by Nginx)

  # PHP 7.3 FPM Service
  php73:
    image: satyadeep/php-73-fpm-alpine-3.9-with-ext  # PHP 7.3 FPM with necessary extensions
    container_name: php73  # Static name for the PHP 7.3 container
    restart: unless-stopped  # Restart policy
    volumes:
      - /var/www/public:/var/www/public  # Same mount point for PHP application files
    logging:
      driver: journald
      options:
        tag: "php73"
        mode: non-blocking
        max-buffer-size: "4m"
    networks:
      - backend  # Only accessible within the backend network

  # PHP 8.1 FPM Service
  php81:
    image: satyadeep/php-81-fpm-alpine-with-ext  # PHP 8.1 FPM with necessary extensions
    container_name: php81  # Static name for the PHP 8.1 container
    restart: unless-stopped  # Restart policy
    volumes:
      - /var/www/public:/var/www/public  # Same mount point for PHP application files
    logging:
      driver: journald
      options:
        tag: "php81"
        mode: non-blocking
        max-buffer-size: "4m"
    networks:
      - backend  # Only accessible within the backend network

  # Let's Encrypt for SSL Certificate Management
  certbot:
    build:
      context: ./letsencrypt  # Path to the directory containing Dockerfile
      dockerfile: Dockerfile  # Custom Dockerfile for Certbot
    container_name: letsencrypt
    volumes:
      - /var/www/private/docker/nginx/ssl:/etc/letsencrypt  # SSL certificates
      - /var/www/private/docker/nginx/logs:/var/log/letsencrypt  # Certbot logs
      - /var/www/public:/var/www/public  # Webroot for validation if needed
      - /var/www/private/docker/nginx/conf.d:/etc/nginx/conf.d  # Mount Nginx virtual host configs
      - /var/www/private/docker/nginx/nginx.conf:/etc/nginx/nginx.conf  # Mount main nginx.conf
      - /var/run/docker.sock:/var/run/docker.sock  # Share the Docker socket for cross-container communication
    entrypoint: /bin/sh -c 'trap exit TERM; while :; do certbot renew --deploy-hook "/scripts/reload-nginx.sh"; sleep 12h & wait $${!}; done;'
    logging:
      driver: journald
      options:
        tag: "letsencrypt"
        mode: non-blocking
        max-buffer-size: "4m"
    networks:
      - web
    restart: unless-stopped


# Networks Definition
networks:
  web:
    driver: bridge  # Public-facing network for web traffic
  backend:
    driver: bridge  # Private network for backend communication (PHP, databases)
